#!/usr/bin/env ruby

puts "üöÄ –°–û–ó–î–ê–ù–ò–ï –£–ú–ù–û–ì–û –°–ö–†–ò–ü–¢–ê –ú–ò–ì–†–ê–¶–ò–ò"
puts "=" * 60

# –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
unless File.exist?('local_schema.sql')
  puts "‚ùå –§–∞–π–ª local_schema.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!"
  exit 1
end

schema_content = File.read('local_schema.sql')

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
sequences = schema_content.scan(/CREATE SEQUENCE[^;]+;/m)
tables = schema_content.scan(/CREATE TABLE[^;]+;/m) 
indexes = schema_content.scan(/CREATE[^;]*INDEX[^;]+;/m)
alters = schema_content.scan(/ALTER TABLE[^;]+;/m)

puts "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É:"
puts "   Sequences: #{sequences.length}"
puts "   Tables: #{tables.length}"  
puts "   Indexes: #{indexes.length}"
puts "   Alters: #{alters.length}"

# –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π SQL —Ñ–∞–π–ª
output_file = 'supabase_smart_migration.sql'
File.open(output_file, 'w') do |f|
  f.puts "-- –£–ú–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø GUMROAD –í SUPABASE"
  f.puts "-- –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: #{Time.now}"
  f.puts "-- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º"
  f.puts ""
  f.puts "-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"
  f.puts "SET client_min_messages TO WARNING;"
  f.puts ""
  
  f.puts "-- =================================="
  f.puts "-- 1. –°–û–ó–î–ê–ù–ò–ï SEQUENCES (–ï–°–õ–ò –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢)"
  f.puts "-- =================================="
  sequences.each_with_index do |seq, index|
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    seq_name = seq.match(/CREATE SEQUENCE\s+(?:public\.)?(\w+)/i)&.captures&.first
    
    if seq_name
      f.puts "-- Sequence #{index + 1}/#{sequences.length}: #{seq_name}"
      f.puts "DO $$ "
      f.puts "BEGIN"
      f.puts "    IF NOT EXISTS (SELECT 1 FROM pg_sequences WHERE sequencename = '#{seq_name}') THEN"
      f.puts "        #{seq.strip}"
      f.puts "    END IF;"
      f.puts "END $$;"
      f.puts ""
    end
  end
  
  f.puts "-- =================================="
  f.puts "-- 2. –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ (–ï–°–õ–ò –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢)"
  f.puts "-- =================================="
  tables.each_with_index do |table, index|
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    table_name = table.match(/CREATE TABLE\s+(?:public\.)?(\w+)/i)&.captures&.first
    
    if table_name
      f.puts "-- –¢–∞–±–ª–∏—Ü–∞ #{index + 1}/#{tables.length}: #{table_name}"
      f.puts "DO $$ "
      f.puts "BEGIN"
      f.puts "    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '#{table_name}' AND table_schema = 'public') THEN"
      # –†–∞–∑–±–∏–≤–∞–µ–º CREATE TABLE –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ DO –±–ª–æ–∫–µ
      table_lines = table.strip.split("\n")
      f.puts "        EXECUTE '"
      table_lines.each_with_index do |line, line_idx|
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ SQL
        escaped_line = line.gsub("'", "''")
        if line_idx == table_lines.length - 1
          f.puts "            #{escaped_line}"
        else
          f.puts "            #{escaped_line}"
        end
      end
      f.puts "        ';"
      f.puts "    END IF;"
      f.puts "END $$;"
      f.puts ""
    end
  end
  
  f.puts "-- =================================="
  f.puts "-- 3. –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í (–ï–°–õ–ò –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢)"
  f.puts "-- =================================="
  indexes.each_with_index do |index_cmd, index|
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–Ω–¥–µ–∫—Å–∞
    index_name = index_cmd.match(/CREATE[^;]*INDEX\s+(?:CONCURRENTLY\s+)?(?:IF NOT EXISTS\s+)?(\w+)/i)&.captures&.first
    
    if index_name
      f.puts "-- –ò–Ω–¥–µ–∫—Å #{index + 1}/#{indexes.length}: #{index_name}"
      f.puts "DO $$ "
      f.puts "BEGIN"
      f.puts "    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = '#{index_name}') THEN"
      f.puts "        EXECUTE '#{index_cmd.strip.gsub("'", "''")}';"
      f.puts "    END IF;"
      f.puts "EXCEPTION WHEN duplicate_table THEN"
      f.puts "    -- –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º"
      f.puts "    NULL;"
      f.puts "END $$;"
      f.puts ""
    else
      # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è, –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      f.puts "-- –ò–Ω–¥–µ–∫—Å #{index + 1}/#{indexes.length}: (–∏–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)"
      f.puts "DO $$ "
      f.puts "BEGIN"
      f.puts "    EXECUTE '#{index_cmd.strip.gsub("'", "''")}';"
      f.puts "EXCEPTION WHEN duplicate_table THEN"
      f.puts "    -- –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º"
      f.puts "    NULL;"
      f.puts "WHEN others THEN"
      f.puts "    -- –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
      f.puts "    RAISE NOTICE '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: %', SQLERRM;"
      f.puts "END $$;"
      f.puts ""
    end
  end
  
  f.puts "-- =================================="
  f.puts "-- 4. ALTER TABLE –ö–û–ú–ê–ù–î–´ (–° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö)"
  f.puts "-- =================================="
  alters.each_with_index do |alter, index|
    f.puts "-- Alter #{index + 1}/#{alters.length}"
    f.puts "DO $$ "
    f.puts "BEGIN"
    f.puts "    EXECUTE '#{alter.strip.gsub("'", "''")}';"
    f.puts "EXCEPTION WHEN duplicate_column THEN"
    f.puts "    -- –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º"
    f.puts "    NULL;"
    f.puts "WHEN duplicate_object THEN"
    f.puts "    -- –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º"  
    f.puts "    NULL;"
    f.puts "WHEN others THEN"
    f.puts "    -- –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
    f.puts "    RAISE NOTICE '–û—à–∏–±–∫–∞ ALTER: %', SQLERRM;"
    f.puts "END $$;"
    f.puts ""
  end
  
  f.puts "-- =================================="
  f.puts "-- –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
  f.puts "-- =================================="
  f.puts "SELECT '–°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü:' as info, count(*) as count FROM information_schema.tables WHERE table_schema = 'public';"
  f.puts "SELECT '–°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤:' as info, count(*) as count FROM pg_indexes WHERE schemaname = 'public';"
  f.puts "SELECT '–°–æ–∑–¥–∞–Ω–æ sequences:' as info, count(*) as count FROM pg_sequences WHERE schemaname = 'public';"
  f.puts ""
  f.puts "-- –£–ú–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê"
end

puts "‚úÖ –£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: #{output_file}"
puts "üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: #{File.size(output_file) / 1024}KB"

puts "\nüéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò –£–ú–ù–û–ì–û –°–ö–†–ò–ü–¢–ê:"
puts "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º"  
puts "‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"
puts "‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
puts "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"

puts "\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:"
puts "1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard SQL Editor"
puts "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –í–ï–°–¨ —Ñ–∞–π–ª: #{output_file}"
puts "3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç"
puts "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Ü–µ"

puts "\n‚ö° –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É!"