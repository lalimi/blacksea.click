#!/usr/bin/env ruby

require_relative 'config/environment'

puts "üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ö–û–õ–û–ù–û–ö –í SUPABASE"
puts "=" * 60

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ User
user_columns = User.column_names

# –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
output_file = 'add_missing_columns.sql'

File.open(output_file, 'w') do |f|
  f.puts "-- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ö–û–õ–û–ù–û–ö –í SUPABASE"
  f.puts "-- –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ö–µ–º–µ Rails –º–æ–¥–µ–ª–∏ User"
  f.puts "-- –°–æ–∑–¥–∞–Ω: #{Time.now}"
  f.puts ""
  f.puts "SET client_min_messages TO WARNING;"
  f.puts ""
  
  f.puts "-- =================================="
  f.puts "-- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–õ–û–ù–û–ö –í –¢–ê–ë–õ–ò–¶–£ USERS"
  f.puts "-- =================================="
  f.puts ""
  
  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
  connection = ActiveRecord::Base.connection
  
  user_columns.each do |column_name|
    begin
      column_info = connection.columns('users').find { |col| col.name == column_name }
      next unless column_info
      
      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø PostgreSQL
      pg_type = case column_info.type
      when :bigint, :integer
        if column_name == 'id'
          'BIGSERIAL PRIMARY KEY'
        elsif column_name.include?('_id')
          'BIGINT'
        else
          'INTEGER'
        end
      when :string
        limit = column_info.limit || 255
        "VARCHAR(#{limit})"
      when :text
        'TEXT'
      when :datetime
        'TIMESTAMP'
      when :date
        'DATE'
      when :boolean
        'BOOLEAN'
      when :decimal
        precision = column_info.precision || 10
        scale = column_info.scale || 2
        "DECIMAL(#{precision}, #{scale})"
      when :json, :jsonb
        'JSONB'
      else
        'TEXT' # Fallback
      end
      
      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º DEFAULT –∏ NULL
      default_clause = ""
      if column_info.default
        case column_info.type
        when :string, :text
          default_clause = " DEFAULT '#{column_info.default}'"
        when :boolean
          default_clause = " DEFAULT #{column_info.default}"
        when :integer, :bigint
          default_clause = " DEFAULT #{column_info.default}"
        when :datetime
          if column_info.default.include?('now')
            default_clause = " DEFAULT NOW()"
          end
        end
      end
      
      null_clause = column_info.null ? "" : " NOT NULL"
      
      # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º PRIMARY KEY –∫–æ–ª–æ–Ω–∫–∏ (id —É–∂–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
      next if column_name == 'id'
      
      f.puts "-- –ö–æ–ª–æ–Ω–∫–∞: #{column_name} (#{column_info.type})"
      f.puts "DO $$ BEGIN"
      f.puts "    IF NOT EXISTS (SELECT 1 FROM information_schema.columns "
      f.puts "                   WHERE table_name = 'users' AND column_name = '#{column_name}' "
      f.puts "                   AND table_schema = 'public') THEN"
      f.puts "        ALTER TABLE users ADD COLUMN #{column_name} #{pg_type}#{default_clause}#{null_clause};"
      f.puts "        RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ users.#{column_name}';"
      f.puts "    END IF;"
      f.puts "EXCEPTION WHEN others THEN"
      f.puts "    RAISE NOTICE '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ #{column_name}: %', SQLERRM;"
      f.puts "END $$;"
      f.puts ""
      
    rescue => e
      puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ #{column_name}: #{e.message}"
    end
  end
  
  f.puts "-- =================================="
  f.puts "-- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–õ–û–ù–û–ö –í –î–†–£–ì–ò–ï –¢–ê–ë–õ–ò–¶–´"
  f.puts "-- =================================="
  f.puts ""
  
  # –ü—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  %w[links affiliates events].each do |table_name|
    begin
      model_class = table_name.singularize.camelize.constantize
      columns = model_class.column_names
      
      f.puts "-- –¢–∞–±–ª–∏—Ü–∞: #{table_name}"
      
      columns.each do |column_name|
        next if column_name == 'id' # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID
        
        column_info = connection.columns(table_name).find { |col| col.name == column_name }
        next unless column_info
        
        pg_type = case column_info.type
        when :bigint, :integer
          if column_name.include?('_id')
            'BIGINT'
          else
            'INTEGER'
          end
        when :string
          limit = column_info.limit || 255
          "VARCHAR(#{limit})"
        when :text
          'TEXT'
        when :datetime
          'TIMESTAMP'
        when :date
          'DATE'
        when :boolean
          'BOOLEAN'
        when :decimal
          'DECIMAL(10,2)'
        when :json, :jsonb
          'JSONB'
        else
          'TEXT'
        end
        
        default_clause = ""
        if column_info.default
          case column_info.type
          when :string, :text
            default_clause = " DEFAULT '#{column_info.default}'"
          when :boolean
            default_clause = " DEFAULT #{column_info.default}"
          when :integer, :bigint
            default_clause = " DEFAULT #{column_info.default}"
          when :datetime
            if column_info.default.to_s.include?('now')
              default_clause = " DEFAULT NOW()"
            end
          end
        end
        
        null_clause = column_info.null ? "" : " NOT NULL"
        
        f.puts "DO $$ BEGIN"
        f.puts "    IF NOT EXISTS (SELECT 1 FROM information_schema.columns "
        f.puts "                   WHERE table_name = '#{table_name}' AND column_name = '#{column_name}' "
        f.puts "                   AND table_schema = 'public') THEN"
        f.puts "        ALTER TABLE #{table_name} ADD COLUMN #{column_name} #{pg_type}#{default_clause}#{null_clause};"
        f.puts "        RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ #{table_name}.#{column_name}';"
        f.puts "    END IF;"
        f.puts "EXCEPTION WHEN others THEN"
        f.puts "    RAISE NOTICE '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ #{table_name}.#{column_name}: %', SQLERRM;"
        f.puts "END $$;"
        f.puts ""
      end
      
      f.puts ""
      
    rescue => e
      puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã #{table_name}: #{e.message}"
    end
  end
  
  f.puts "-- =================================="
  f.puts "-- –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
  f.puts "-- =================================="
  f.puts "SELECT table_name, column_name, data_type "
  f.puts "FROM information_schema.columns "
  f.puts "WHERE table_name IN ('users', 'links', 'affiliates', 'events') "
  f.puts "  AND table_schema = 'public' "
  f.puts "ORDER BY table_name, ordinal_position;"
  f.puts ""
  f.puts "-- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–õ–û–ù–û–ö –ó–ê–í–ï–†–®–ï–ù–û"
end

puts "‚úÖ –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω: #{output_file}"
puts "üìè –†–∞–∑–º–µ—Ä: #{File.size(output_file) / 1024}KB"

puts "\nüìä –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ users: #{user_columns.length}"
puts "   #{user_columns.first(10).join(', ')}, ..."

puts "\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò:"
puts "1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ #{output_file} –≤ Supabase SQL Editor"
puts "2. –ó–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
puts "3. –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏"