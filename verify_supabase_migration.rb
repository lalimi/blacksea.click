#!/usr/bin/env ruby

require 'net/http'
require 'json'

SUPABASE_URL = 'https://qewjnagvsbnwgamrrrwg.supabase.co'
SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFld2puYWd2c2Jud2dhbXJycndnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTY5NjExNSwiZXhwIjoyMDcxMjcyMTE1fQ.yHfkPEm8qRVgcQHm13S84eeEMXYwjMCOhBLiOWaHnlI'

puts "üéâ –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –ú–ò–ì–†–ê–¶–ò–ò –í SUPABASE"
puts "=" * 60

def api_request(table, limit = 5)
  uri = URI("#{SUPABASE_URL}/rest/v1/#{table}?limit=#{limit}")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.read_timeout = 10
  
  request = Net::HTTP::Get.new(uri)
  request['apikey'] = SERVICE_KEY
  request['Authorization'] = "Bearer #{SERVICE_KEY}"
  request['Content-Type'] = 'application/json'
  
  response = http.request(request)
  
  case response.code.to_i
  when 200
    data = JSON.parse(response.body)
    { success: true, data: data, count: data.length }
  when 403
    { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ (RLS –ø–æ–ª–∏—Ç–∏–∫–∏)' }
  when 404
    { success: false, error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }
  else
    { success: false, error: "HTTP #{response.code}: #{response.body}" }
  end
rescue => e
  { success: false, error: e.message }
end

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
tables_to_check = [
  { name: 'users', expected: 5 },
  { name: 'links', expected: 4 },
  { name: 'affiliates', expected: 2 },
  { name: 'events', expected: 26 },
  { name: 'prices', expected: 5 },
  { name: 'refund_policies', expected: 1 },
  { name: 'variant_categories', expected: 1 }
]

puts "üìä –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:"
puts "-" * 40

success_count = 0
total_records = 0

tables_to_check.each do |table_info|
  table_name = table_info[:name]
  expected = table_info[:expected]
  
  print "#{table_name.ljust(20)}: "
  
  result = api_request(table_name, 50)
  
  if result[:success]
    count = result[:count]
    total_records += count
    
    if count >= expected
      puts "‚úÖ #{count} –∑–∞–ø–∏—Å–µ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å #{expected})"
      success_count += 1
    else
      puts "‚ö†Ô∏è  #{count} –∑–∞–ø–∏—Å–µ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å #{expected})"
    end
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if result[:data] && result[:data].length > 0
      sample = result[:data].first
      key_fields = %w[id name email title unique_permalink].select { |field| sample[field] }
      if key_fields.any?
        puts "    –ü—Ä–∏–º–µ—Ä: #{key_fields.map { |f| "#{f}=#{sample[f]}" }.join(', ')}"
      end
    end
  else
    puts "‚ùå #{result[:error]}"
  end
end

puts "-" * 40
puts "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:"
puts "  –£—Å–ø–µ—à–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: #{success_count}/#{tables_to_check.length}"
puts "  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: #{total_records}"

if success_count == tables_to_check.length
  puts "\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!"
  puts "   ‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"
  puts "   ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
  puts "   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º"
  
  puts "\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
  puts "   1. –î–æ–±–∞–≤—å—Ç–µ IP 188.190.191.38 –≤ Supabase Allow List"
  puts "   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
  puts "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Rails —Å Supabase"
else
  puts "\n‚ö†Ô∏è  –ú–ò–ì–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø:"
  puts "   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º"
  puts "   –í–æ–∑–º–æ–∂–Ω–æ, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã RLS –ø–æ–ª–∏—Ç–∏–∫–∏"
end

puts "\n" + "=" * 60