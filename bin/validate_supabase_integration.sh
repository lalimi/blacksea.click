#!/bin/bash

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

set -e

echo "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase..."
echo "======================================"

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f .env.local ]; then
    source .env.local
    echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
else
    echo "‚ùå –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
echo "   Database Host: $DATABASE_HOST"
echo "   Database Port: $DATABASE_PORT"
echo "   Database Name: $DATABASE_NAME"
echo "   Supabase URL: $SUPABASE_URL"
echo

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validate_connection() {
    echo "üîó 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    if command -v psql &> /dev/null; then
        PGPASSWORD="$DATABASE_PASSWORD" psql \
            -h "$DATABASE_HOST" \
            -p "$DATABASE_PORT" \
            -U "$DATABASE_USERNAME" \
            -d "$DATABASE_NAME" \
            -c "SELECT 'Connection successful' as status;" \
            --set sslmode=require \
            2>/dev/null | grep -q "Connection successful"
        
        if [ $? -eq 0 ]; then
            echo "   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ"
        else
            echo "   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"
            return 1
        fi
    else
        echo "   ‚ö†Ô∏è PostgreSQL –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    fi
}

validate_tables() {
    echo "üìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü..."
    
    if command -v psql &> /dev/null; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_check=$(PGPASSWORD="$DATABASE_PASSWORD" psql \
            -h "$DATABASE_HOST" \
            -p "$DATABASE_PORT" \
            -U "$DATABASE_USERNAME" \
            -d "$DATABASE_NAME" \
            -t -c "
            SELECT COUNT(*) FROM information_schema.tables 
            WHERE table_name IN ('users', 'products', 'purchases', 'product_files', 'comments')
            AND table_schema = 'public';" \
            --set sslmode=require \
            2>/dev/null | tr -d ' ')
        
        if [ "$tables_check" -eq 5 ]; then
            echo "   ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
        else
            echo "   ‚ùå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ $tables_check –∏–∑ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS
        rls_check=$(PGPASSWORD="$DATABASE_PASSWORD" psql \
            -h "$DATABASE_HOST" \
            -p "$DATABASE_PORT" \
            -U "$DATABASE_USERNAME" \
            -d "$DATABASE_NAME" \
            -t -c "
            SELECT COUNT(*) FROM pg_class c 
            JOIN pg_namespace n ON c.relnamespace = n.oid 
            WHERE c.relrowsecurity = true 
            AND n.nspname = 'public' 
            AND c.relname IN ('users', 'products', 'purchases', 'product_files', 'comments');" \
            --set sslmode=require \
            2>/dev/null | tr -d ' ')
        
        if [ "$rls_check" -eq 5 ]; then
            echo "   ‚úÖ RLS –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"
        else
            echo "   ‚ö†Ô∏è RLS –≤–∫–ª—é—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è $rls_check –∏–∑ 5 —Ç–∞–±–ª–∏—Ü"
        fi
    else
        echo "   ‚ö†Ô∏è PostgreSQL –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–±–ª–∏—Ü"
    fi
}

validate_environment() {
    echo "üîß 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    required_vars=("DATABASE_HOST" "DATABASE_PORT" "DATABASE_USERNAME" "DATABASE_PASSWORD" "SUPABASE_URL")
    missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -eq 0 ]; then
        echo "   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        echo "   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing_vars[*]}"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    if [ "$SUPABASE_ANON_KEY" = "your_anon_key_here" ]; then
        echo "   ‚ö†Ô∏è SUPABASE_ANON_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    else
        echo "   ‚úÖ SUPABASE_ANON_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    if [ "$SUPABASE_SERVICE_ROLE_KEY" = "your_service_role_key_here" ]; then
        echo "   ‚ö†Ô∏è SUPABASE_SERVICE_ROLE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    else
        echo "   ‚úÖ SUPABASE_SERVICE_ROLE_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

validate_rails_config() {
    echo "üöÇ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Rails..."
    
    if [ -f "config/database.yml" ]; then
        echo "   ‚úÖ database.yml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if grep -q "ENV.fetch" config/database.yml; then
            echo "   ‚úÖ database.yml –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        else
            echo "   ‚ö†Ô∏è database.yml –º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        fi
    else
        echo "   ‚ùå config/database.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f "config/supabase.rb" ]; then
        echo "   ‚úÖ config/supabase.rb —Å–æ–∑–¥–∞–Ω"
    else
        echo "   ‚ö†Ô∏è config/supabase.rb –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f "app/controllers/supabase_auth_controller.rb" ]; then
        echo "   ‚úÖ SupabaseAuthController —Å–æ–∑–¥–∞–Ω"
    else
        echo "   ‚ö†Ô∏è SupabaseAuthController –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

validate_migrations() {
    echo "üìù 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."
    
    migration_count=$(ls supabase/migrations/*.sql 2>/dev/null | wc -l | tr -d ' ')
    
    if [ "$migration_count" -gt 0 ]; then
        echo "   ‚úÖ –ù–∞–π–¥–µ–Ω–æ $migration_count –º–∏–≥—Ä–∞—Ü–∏–π Supabase"
        
        echo "   üìÅ –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π:"
        for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
                basename "$migration"
            fi
        done | sed 's/^/      - /'
    else
        echo "   ‚ùå –ú–∏–≥—Ä–∞—Ü–∏–∏ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

validate_routes() {
    echo "üõ£Ô∏è 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤..."
    
    if grep -q "supabase_auth" config/routes.rb; then
        echo "   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã Supabase Auth –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    else
        echo "   ‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã Supabase Auth –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ routes.rb"
    fi
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
echo "–ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é..."
echo

validation_failed=false

validate_environment || validation_failed=true
echo
validate_connection || validation_failed=true
echo
validate_tables || validation_failed=true
echo
validate_rails_config || validation_failed=true
echo
validate_migrations || validation_failed=true
echo
validate_routes || validation_failed=true

echo
echo "======================================"
if [ "$validation_failed" = true ]; then
    echo "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
    echo
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Supabase Dashboard"
    echo "   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ IP –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ Allow List"
    echo "   3. –û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏ –≤ .env.local"
    echo "   4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: supabase db reset"
    echo
    echo "üìñ –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ SUPABASE_SETUP_INSTRUCTIONS.md"
    exit 1
else
    echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo
    echo "üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ Supabase Dashboard"
    echo "   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: supabase db reset"
    echo "   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ development"
    echo "   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
fi