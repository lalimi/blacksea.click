#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'uri'

puts "üöÄ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –í–°–ï–• –¢–ê–ë–õ–ò–¶ –í SUPABASE"
puts "=" * 60

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = 'https://qewjnagvsbnwgamrrrwg.supabase.co'
SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFld2puYWd2c2Jud2dhbXJycndnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTY5NjExNSwiZXhwIjoyMDcxMjcyMTE1fQ.yHfkPEm8qRVgcQHm13S84eeEMXYwjMCOhBLiOWaHnlI'

puts "üìÅ –ß–∏—Ç–∞–µ–º —Å—Ö–µ–º—É –∏–∑ —Ñ–∞–π–ª–∞ local_schema.sql..."
unless File.exist?('local_schema.sql')
  puts "‚ùå –§–∞–π–ª local_schema.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!"
  exit 1
end

schema_content = File.read('local_schema.sql')

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ CREATE TABLE –∫–æ–º–∞–Ω–¥—ã
table_creates = schema_content.scan(/CREATE TABLE[^;]+;/m)
puts "üìä –ù–∞–π–¥–µ–Ω–æ CREATE TABLE –∫–æ–º–∞–Ω–¥: #{table_creates.length}"

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ CREATE INDEX –∫–æ–º–∞–Ω–¥—ã  
index_creates = schema_content.scan(/CREATE[^;]*INDEX[^;]+;/m)
puts "üìä –ù–∞–π–¥–µ–Ω–æ CREATE INDEX –∫–æ–º–∞–Ω–¥: #{index_creates.length}"

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ ALTER TABLE –∫–æ–º–∞–Ω–¥—ã
alter_commands = schema_content.scan(/ALTER TABLE[^;]+;/m)
puts "üìä –ù–∞–π–¥–µ–Ω–æ ALTER TABLE –∫–æ–º–∞–Ω–¥: #{alter_commands.length}"

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ CREATE SEQUENCE –∫–æ–º–∞–Ω–¥—ã
sequence_creates = schema_content.scan(/CREATE SEQUENCE[^;]+;/m)
puts "üìä –ù–∞–π–¥–µ–Ω–æ CREATE SEQUENCE –∫–æ–º–∞–Ω–¥: #{sequence_creates.length}"

# –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Supabase Dashboard
output_file = 'supabase_migration.sql'
File.open(output_file, 'w') do |f|
  f.puts "-- –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø GUMROAD –í SUPABASE"
  f.puts "-- –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: #{Time.now}"
  f.puts "-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: #{table_creates.length}"
  f.puts ""
  
  f.puts "-- =================================="
  f.puts "-- 1. –°–û–ó–î–ê–ù–ò–ï SEQUENCES"
  f.puts "-- =================================="
  sequence_creates.each_with_index do |seq, index|
    f.puts "-- Sequence #{index + 1}/#{sequence_creates.length}"
    f.puts seq
    f.puts ""
  end
  
  f.puts "-- =================================="
  f.puts "-- 2. –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶"  
  f.puts "-- =================================="
  table_creates.each_with_index do |table, index|
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    table_name = table.match(/CREATE TABLE\s+(?:public\.)?(\w+)/i)&.captures&.first
    
    f.puts "-- –¢–∞–±–ª–∏—Ü–∞ #{index + 1}/#{table_creates.length}: #{table_name}"
    f.puts table
    f.puts ""
  end
  
  f.puts "-- =================================="
  f.puts "-- 3. –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í"
  f.puts "-- =================================="
  index_creates.each_with_index do |index_cmd, index|
    f.puts "-- –ò–Ω–¥–µ–∫—Å #{index + 1}/#{index_creates.length}"
    f.puts index_cmd
    f.puts ""
  end
  
  f.puts "-- =================================="
  f.puts "-- 4. ALTER TABLE –ö–û–ú–ê–ù–î–´"
  f.puts "-- =================================="
  alter_commands.each_with_index do |alter, index|
    f.puts "-- Alter #{index + 1}/#{alter_commands.length}"
    f.puts alter
    f.puts ""
  end
  
  f.puts "-- =================================="
  f.puts "-- –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê"
  f.puts "-- =================================="
end

puts "‚úÖ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: #{output_file}"
puts "üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: #{File.size(output_file) / 1024}KB"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
puts "\nüìä –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö..."
data_content = File.read('local_data.sql')

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ INSERT –∫–æ–º–∞–Ω–¥—ã
insert_commands = data_content.scan(/INSERT INTO[^;]+;/m)
puts "üìä –ù–∞–π–¥–µ–Ω–æ INSERT –∫–æ–º–∞–Ω–¥: #{insert_commands.length}"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
data_output = 'supabase_data.sql'
File.open(data_output, 'w') do |f|
  f.puts "-- –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• GUMROAD –í SUPABASE"
  f.puts "-- –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: #{Time.now}"
  f.puts "-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ INSERT –∫–æ–º–∞–Ω–¥: #{insert_commands.length}"
  f.puts ""
  
  f.puts "-- –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞"
  f.puts "SET session_replication_role = replica;"
  f.puts ""
  
  insert_commands.each_with_index do |insert, index|
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ INSERT
    table_name = insert.match(/INSERT INTO\s+(?:public\.)?(\w+)/i)&.captures&.first
    
    f.puts "-- –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: #{table_name} (#{index + 1}/#{insert_commands.length})"
    f.puts insert
    f.puts ""
  end
  
  f.puts "-- –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ"
  f.puts "SET session_replication_role = DEFAULT;"
  f.puts ""
  f.puts "-- –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù"
end

puts "‚úÖ –°–∫—Ä–∏–ø—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: #{data_output}"
puts "üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: #{File.size(data_output) / 1024}KB"

puts "\n" + "=" * 60
puts "üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–ú–ü–û–†–¢–£:"
puts "=" * 60

puts "\n1Ô∏è‚É£  –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard:"
puts "   https://supabase.com/dashboard/project/qewjnagvsbnwgamrrrwg"

puts "\n2Ô∏è‚É£  –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor:"
puts "   Dashboard ‚Üí SQL Editor ‚Üí New query"

puts "\n3Ô∏è‚É£  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã:"
puts "   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: #{output_file}"
puts "   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
puts "   ‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –≤ SQL Editor"
puts "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ RUN"

puts "\n4Ô∏è‚É£  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:"
puts "   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: #{data_output}"
puts "   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
puts "   ‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –≤ SQL Editor"
puts "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ RUN"

puts "\n5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"
puts "   ruby verify_migration.rb"

puts "\n‚ö° –í–ê–ñ–ù–û:"
puts "   ‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ"
puts "   ‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö - —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ Dashboard"
puts "   ‚Ä¢ –ë–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏"

puts "\nüéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ #{table_creates.length} —Ç–∞–±–ª–∏—Ü!"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
File.open('verify_migration.rb', 'w') do |f|
  f.puts <<~RUBY
    require 'net/http'
    require 'json'
    
    SUPABASE_URL = '#{SUPABASE_URL}'
    SERVICE_KEY = '#{SERVICE_KEY}'
    
    def check_table(table_name)
      uri = URI("\#{SUPABASE_URL}/rest/v1/\#{table_name}?limit=1")
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true
      
      request = Net::HTTP::Get.new(uri)
      request['apikey'] = SERVICE_KEY
      request['Authorization'] = "Bearer \#{SERVICE_KEY}"
      
      response = http.request(request)
      
      case response.code
      when '200'
        data = JSON.parse(response.body)
        puts "‚úÖ \#{table_name}: OK (\#{data.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞–Ω–æ)"
        true
      when '400', '404'
        puts "‚ùå \#{table_name}: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢"
        false
      else
        puts "‚ö†Ô∏è  \#{table_name}: –∫–æ–¥ \#{response.code}"
        false
      end
    rescue => e
      puts "‚ùå \#{table_name}: –û–®–ò–ë–ö–ê - \#{e.message}"
      false
    end
    
    puts "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ Supabase..."
    
    tables = #{table_creates.map { |t| t.match(/CREATE TABLE\s+(?:public\.)?(\w+)/i)&.captures&.first }.compact.inspect}
    
    success_count = 0
    tables.each do |table|
      success_count += 1 if check_table(table)
    end
    
    puts "\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:"
    puts "   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: \#{tables.length} —Ç–∞–±–ª–∏—Ü"
    puts "   –£—Å–ø–µ—à–Ω–æ: \#{success_count}"
    puts "   –û—à–∏–±–æ–∫: \#{tables.length - success_count}"
    
    if success_count == tables.length
      puts "\\nüéâ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –ú–ò–ì–†–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!"
    else
      puts "\\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    end
  RUBY
end

puts "\nüìã –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: verify_migration.rb"