#!/usr/bin/env ruby

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ service role key (–æ–±—Ö–æ–¥–∏—Ç RLS)
require 'net/http'
require 'json'
require 'uri'

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env.local
env_vars = {}
File.readlines('.env.local').each do |line|
  line.strip!
  next if line.empty? || line.start_with?('#')
  key, value = line.split('=', 2)
  env_vars[key] = value if key && value
end

supabase_url = env_vars['SUPABASE_URL']
service_key = env_vars['SUPABASE_SERVICE_ROLE_KEY']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º service key –≤–º–µ—Å—Ç–æ anon

puts "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Service Role Key..."
puts "URL: #{supabase_url}"

if !service_key || service_key == 'your_service_role_key_here'
  puts "‚ùå SUPABASE_SERVICE_ROLE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
  exit 1
end

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å service key
def api_request(url, key, method, path, data = nil)
  uri = URI("#{url}#{path}")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  
  case method.upcase
  when 'GET'
    request = Net::HTTP::Get.new(uri)
  when 'POST'
    request = Net::HTTP::Post.new(uri)
    request.body = data.to_json if data
  when 'PATCH'
    request = Net::HTTP::Patch.new(uri)
    request.body = data.to_json if data
  end
  
  request['apikey'] = key
  request['Authorization'] = "Bearer #{key}"
  request['Content-Type'] = 'application/json'
  request['Prefer'] = 'return=representation'
  
  response = http.request(request)
  
  {
    code: response.code.to_i,
    body: response.body,
    parsed: (JSON.parse(response.body) rescue response.body)
  }
rescue => e
  { error: e.message }
end

# –¢–µ—Å—Ç—ã —Ç–∞–±–ª–∏—Ü
tables_to_test = ['users', 'products', 'purchases', 'product_files', 'comments']

puts "\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Service Key:"

tables_to_test.each do |table|
  print "   Testing #{table}... "
  
  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  result = api_request(supabase_url, service_key, 'GET', "/rest/v1/#{table}?select=count")
  
  case result[:code]
  when 200
    puts "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ (#{result[:parsed].length} –∑–∞–ø–∏—Å–µ–π)"
  when 400
    puts "‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º"
  when 404
    puts "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
  when 401, 403
    puts "üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–¥–∞–∂–µ –¥–ª—è service key)"
  else
    puts "‚ùì –ö–æ–¥ #{result[:code]}: #{result[:parsed]}"
  end
end

puts "\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
test_user = {
  email: "test_#{Time.now.to_i}@example.com",
  name: "Test User",
  username: "testuser_#{Time.now.to_i}"
}

result = api_request(supabase_url, service_key, 'POST', "/rest/v1/users", test_user)

case result[:code]
when 201
  puts "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
  puts "   ID: #{result[:parsed][0]['id']}"
  puts "   Email: #{result[:parsed][0]['email']}"
  
  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  user_id = result[:parsed][0]['id']
  read_result = api_request(supabase_url, service_key, 'GET', "/rest/v1/users?id=eq.#{user_id}")
  
  if read_result[:code] == 200 && read_result[:parsed].length > 0
    puts "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –∏–∑ –±–∞–∑—ã"
  else
    puts "‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å"
  end
  
when 400
  puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: #{result[:parsed]}"
when 401, 403
  puts "üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ (RLS –∞–∫—Ç–∏–≤–µ–Ω)"
when 409
  puts "‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"
else
  puts "‚ùå –û—à–∏–±–∫–∞ #{result[:code]}: #{result[:parsed]}"
end

puts "\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:"

test_product = {
  name: "Test Product #{Time.now.to_i}",
  description: "Test product description",
  price_cents: 1000,
  published: false
}

result = api_request(supabase_url, service_key, 'POST', "/rest/v1/products", test_product)

case result[:code]
when 201
  puts "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
  puts "   ID: #{result[:parsed][0]['id']}"
  puts "   Name: #{result[:parsed][0]['name']}"
when 400
  puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: #{result[:parsed]}"
when 401, 403
  puts "üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
else
  puts "‚ùå –û—à–∏–±–∫–∞ #{result[:code]}: #{result[:parsed]}"
end

puts "\n" + "="*60
puts "üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:"

puts "\n‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
puts "   ‚Ä¢ Supabase REST API –¥–æ—Å—Ç—É–ø–µ–Ω"
puts "   ‚Ä¢ Service Role Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
puts "   ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"

puts "\nüîß –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º:"
puts "   ‚Ä¢ RLS (Row Level Security) –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
puts "   ‚Ä¢ –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
puts "   ‚Ä¢ –ò–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å RLS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

puts "\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
puts "   1. –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
puts "   2. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞—Å—Ç—Ä–æ–∏–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏"
puts "   3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rails –º–æ–¥–µ–ª—è–º–∏"