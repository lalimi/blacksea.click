-- ========================================
-- –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –ë–ï–ó –ò–ù–î–ï–ö–°–û–í
-- –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —É–∂–µ –µ—Å—Ç—å, –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ
-- ========================================

-- ========================================  
-- 1. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
-- ========================================

-- –ö–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å?
SELECT 
    table_name,
    table_type
FROM information_schema.tables 
WHERE table_schema = 'public' 
    AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- –ö–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)?
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
    AND table_name = 'users'
ORDER BY ordinal_position;

-- ========================================  
-- 2. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
-- ========================================

-- Active Storage Blobs
CREATE TABLE IF NOT EXISTS active_storage_blobs (
  id BIGSERIAL PRIMARY KEY,
  key VARCHAR(191) NOT NULL,
  filename VARCHAR(191) NOT NULL,
  content_type VARCHAR(191),
  metadata TEXT,
  byte_size BIGINT NOT NULL,
  checksum VARCHAR(191),
  created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  service_name VARCHAR NOT NULL
);

-- Active Storage Attachments  
CREATE TABLE IF NOT EXISTS active_storage_attachments (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(191) NOT NULL,
  record_type VARCHAR(191) NOT NULL,
  record_id BIGINT NOT NULL,
  blob_id BIGINT NOT NULL,
  created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL
);

-- Active Storage Variant Records
CREATE TABLE IF NOT EXISTS active_storage_variant_records (
  id BIGSERIAL PRIMARY KEY,
  blob_id BIGINT NOT NULL,
  variation_digest VARCHAR NOT NULL
);

-- Products Table (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
CREATE TABLE IF NOT EXISTS products (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price_cents INTEGER DEFAULT 0,
    currency VARCHAR(3) DEFAULT 'USD',
    published BOOLEAN DEFAULT false,
    permalink VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Purchases Table
CREATE TABLE IF NOT EXISTS purchases (
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT,
    user_id BIGINT,
    customer_email VARCHAR(255),
    price_cents INTEGER DEFAULT 0,
    currency VARCHAR(3) DEFAULT 'USD',
    purchase_token VARCHAR(255),
    status VARCHAR(50) DEFAULT 'completed',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Product Files Table
CREATE TABLE IF NOT EXISTS product_files (
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT,
    name VARCHAR(255),
    file_size BIGINT,
    content_type VARCHAR(255),
    file_key VARCHAR(500),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Comments Table
CREATE TABLE IF NOT EXISTS comments (
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT,
    user_id BIGINT,
    author_name VARCHAR(255),
    author_email VARCHAR(255),
    content TEXT,
    rating INTEGER,
    published BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- ========================================
-- 3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É supabase_user_id –≤ users
-- ========================================

DO $$
BEGIN
    -- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public'
        AND table_name = 'users' 
        AND column_name = 'supabase_user_id'
    ) THEN
        ALTER TABLE users ADD COLUMN supabase_user_id UUID;
        RAISE NOTICE 'Added supabase_user_id column to users table';
    ELSE
        RAISE NOTICE 'supabase_user_id column already exists';
    END IF;
END $$;

-- ========================================
-- 4. –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã
-- ========================================

-- –ò–Ω–¥–µ–∫—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
CREATE UNIQUE INDEX IF NOT EXISTS idx_blobs_key ON active_storage_blobs (key);

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å email –≤ users –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public'
        AND table_name = 'users' 
        AND column_name = 'email'
    ) THEN
        CREATE UNIQUE INDEX IF NOT EXISTS idx_users_email ON users (email);
        RAISE NOTICE 'Created email index on users';
    ELSE
        RAISE NOTICE 'Email column does not exist in users table';
    END IF;
END $$;

-- ========================================
-- 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
-- ========================================

-- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
SELECT 
    table_name as "üìã Table Name",
    (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name AND table_schema = 'public') as "Columns"
FROM information_schema.tables t
WHERE table_schema = 'public' 
    AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É users
SELECT 
    'üë§ USERS TABLE STRUCTURE' as info;

SELECT 
    column_name as "Column",
    data_type as "Type",
    CASE WHEN is_nullable = 'YES' THEN '‚úì' ELSE '‚úó' END as "Nullable"
FROM information_schema.columns 
WHERE table_schema = 'public' 
    AND table_name = 'users'
ORDER BY ordinal_position;

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã
SELECT 
    'üìä CREATED INDEXES' as info;

SELECT 
    tablename as "Table",
    indexname as "Index Name",
    CASE WHEN indexdef LIKE '%UNIQUE%' THEN 'üîë Unique' ELSE 'üìà Regular' END as "Type"
FROM pg_indexes 
WHERE schemaname = 'public'
    AND tablename IN ('users', 'products', 'active_storage_blobs')
ORDER BY tablename, indexname;

-- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
SELECT '‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!' as "üéâ Status";