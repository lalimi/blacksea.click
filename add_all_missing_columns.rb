#!/usr/bin/env ruby

require_relative 'config/environment'

puts "üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ö–û–õ–û–ù–û–ö"
puts "=" * 60

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
models_with_data = []

Dir.glob("app/models/*.rb").each do |file|
  model_name = File.basename(file, '.rb').camelize
  
  begin
    model_class = model_name.constantize
    if model_class.is_a?(Class) && model_class < ActiveRecord::Base
      count = model_class.count rescue 0
      if count > 0
        models_with_data << {
          model: model_class,
          name: model_name,
          count: count,
          table_name: model_class.table_name
        }
      end
    end
  rescue => e
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  end
end

puts "üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: #{models_with_data.length}"

# –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
output_file = 'add_all_missing_columns.sql'
connection = ActiveRecord::Base.connection

File.open(output_file, 'w') do |f|
  f.puts "-- –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ö–û–õ–û–ù–û–ö –í–û –í–°–ï –¢–ê–ë–õ–ò–¶–´"
  f.puts "-- –°–æ–∑–¥–∞–Ω: #{Time.now}"
  f.puts ""
  f.puts "SET client_min_messages TO WARNING;"
  f.puts ""
  
  models_with_data.each do |model_info|
    model_class = model_info[:model]
    table_name = model_info[:table_name]
    model_name = model_info[:name]
    
    puts "üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º #{model_name} (—Ç–∞–±–ª–∏—Ü–∞: #{table_name})"
    
    f.puts "-- ========================================"
    f.puts "-- –¢–ê–ë–õ–ò–¶–ê: #{table_name.upcase} (–º–æ–¥–µ–ª—å: #{model_name})"
    f.puts "-- ========================================"
    f.puts ""
    
    begin
      columns = connection.columns(table_name)
      
      columns.each do |column_info|
        column_name = column_info.name
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID - –æ–Ω –¥–æ–ª–∂–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        next if column_name == 'id'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø PostgreSQL
        pg_type = case column_info.type
        when :bigint
          'BIGINT'
        when :integer
          if column_name.include?('_id') || column_name == 'flags'
            'BIGINT'  # –í—Å–µ ID –∏ flags –¥–µ–ª–∞–µ–º BIGINT
          else
            'INTEGER'
          end
        when :string
          limit = column_info.limit || 255
          "VARCHAR(#{limit})"
        when :text
          'TEXT'
        when :datetime
          'TIMESTAMP'
        when :date
          'DATE'
        when :boolean
          'BOOLEAN'
        when :decimal
          precision = column_info.precision || 10
          scale = column_info.scale || 2
          "DECIMAL(#{precision}, #{scale})"
        when :float
          'DOUBLE PRECISION'
        when :json, :jsonb
          'JSONB'
        else
          'TEXT' # Fallback
        end
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º DEFAULT
        default_clause = ""
        if column_info.default
          case column_info.type
          when :string, :text
            default_clause = " DEFAULT '#{column_info.default}'"
          when :boolean
            default_clause = " DEFAULT #{column_info.default}"
          when :integer, :bigint
            default_clause = " DEFAULT #{column_info.default}"
          when :datetime
            if column_info.default.to_s.include?('now')
              default_clause = " DEFAULT NOW()"
            end
          end
        end
        
        # NULL/NOT NULL
        null_clause = column_info.null ? "" : " NOT NULL"
        
        f.puts "-- –ö–æ–ª–æ–Ω–∫–∞: #{column_name} (#{column_info.type})"
        f.puts "DO $$ BEGIN"
        f.puts "    IF NOT EXISTS (SELECT 1 FROM information_schema.columns "
        f.puts "                   WHERE table_name = '#{table_name}' AND column_name = '#{column_name}' "
        f.puts "                   AND table_schema = 'public') THEN"
        f.puts "        ALTER TABLE #{table_name} ADD COLUMN #{column_name} #{pg_type}#{default_clause}#{null_clause};"
        f.puts "        RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ #{table_name}.#{column_name} (#{pg_type})';"
        f.puts "    END IF;"
        f.puts "EXCEPTION WHEN others THEN"
        f.puts "    RAISE NOTICE '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è #{table_name}.#{column_name}: %', SQLERRM;"
        f.puts "END $$;"
        f.puts ""
      end
      
      f.puts ""
      
    rescue => e
      puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ #{table_name}: #{e.message}"
      f.puts "-- –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò #{table_name}: #{e.message}"
      f.puts ""
    end
  end
  
  f.puts "-- ========================================"
  f.puts "-- –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
  f.puts "-- ========================================"
  
  models_with_data.each do |model_info|
    table_name = model_info[:table_name]
    f.puts "SELECT '#{table_name}' as table_name, count(*) as columns_count "
    f.puts "FROM information_schema.columns "
    f.puts "WHERE table_name = '#{table_name}' AND table_schema = 'public';"
  end
  
  f.puts ""
  f.puts "-- –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ö–û–õ–û–ù–û–ö –ó–ê–í–ï–†–®–ï–ù–û"
end

puts "‚úÖ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: #{output_file}"
puts "üìè –†–∞–∑–º–µ—Ä: #{File.size(output_file) / 1024}KB"

puts "\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: #{models_with_data.length}"
models_with_data.each do |m|
  puts "  #{m[:name]} (#{m[:table_name]}) - #{m[:count]} –∑–∞–ø–∏—Å–µ–π"
end

puts "\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò:"
puts "1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ #{output_file} –≤ Supabase SQL Editor"
puts "2. –ó–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
puts "3. –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏"