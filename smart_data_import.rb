#!/usr/bin/env ruby

require_relative 'config/environment'

puts "üîÑ –£–ú–ù–´–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –° –ü–†–û–í–ï–†–ö–û–ô –ö–û–õ–û–ù–û–ö"
puts "=" * 60

# –ü–æ–¥–∫–ª—é—á–∏–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
local_connection = ActiveRecord::Base.connection

# –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏
tables_with_data = []

Dir.glob("app/models/*.rb").each do |file|
  model_name = File.basename(file, '.rb').camelize
  
  begin
    model_class = model_name.constantize
    if model_class.is_a?(Class) && model_class < ActiveRecord::Base
      count = model_class.count rescue 0
      if count > 0
        tables_with_data << {
          model: model_class,
          name: model_name,
          count: count,
          table_name: model_class.table_name
        }
      end
    end
  rescue => e
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  end
end

puts "üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏: #{tables_with_data.length}"

# –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–æ–Ω–æ–∫
output_file = 'supabase_smart_data.sql'

File.open(output_file, 'w') do |f|
  f.puts "-- –£–ú–ù–´–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• GUMROAD –í SUPABASE"
  f.puts "-- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π"
  f.puts "-- –°–æ–∑–¥–∞–Ω: #{Time.now}"
  f.puts ""
  f.puts "SET client_min_messages TO WARNING;"
  f.puts ""
  
  tables_with_data.sort_by { |t| t[:name] }.each do |table_info|
    model_class = table_info[:model]
    table_name = table_info[:table_name]
    count = table_info[:count]
    
    puts "üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º #{table_info[:name]} (#{count} –∑–∞–ø–∏—Å–µ–π)..."
    
    f.puts "-- ========================================"
    f.puts "-- #{table_info[:name].upcase} (#{count} –∑–∞–ø–∏—Å–µ–π)"
    f.puts "-- ========================================"
    f.puts ""
    
    begin
      # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      records = model_class.all.limit(100) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      
      records.each_with_index do |record, index|
        attributes = record.attributes
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–π
        columns = []
        values = []
        
        attributes.each do |column, value|
          # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Supabase
          next if %w[active_test_path_assignments stripe_fee_cents].include?(column)
          
          columns << column
          
          # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          case value
          when nil
            values << 'NULL'
          when String
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            escaped_value = value.gsub("'", "''").gsub("\n", "\\n").gsub("\r", "\\r")
            values << "'#{escaped_value}'"
          when Time, DateTime
            values << "'#{value.strftime('%Y-%m-%d %H:%M:%S')}'"
          when Date
            values << "'#{value.strftime('%Y-%m-%d')}'"
          when TrueClass, FalseClass
            values << value.to_s
          when Numeric
            values << value.to_s
          when Hash, Array
            # JSON –ø–æ–ª—è
            escaped_json = value.to_json.gsub("'", "''")
            values << "'#{escaped_json}'"
          else
            escaped_value = value.to_s.gsub("'", "''")
            values << "'#{escaped_value}'"
          end
        end
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é INSERT –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–æ–Ω–æ–∫
        f.puts "-- –ó–∞–ø–∏—Å—å #{index + 1}/#{records.length} –¥–ª—è #{table_name}"
        f.puts "DO $$ "
        f.puts "DECLARE"
        f.puts "    col_exists BOOLEAN;"
        f.puts "    missing_cols TEXT[] := ARRAY[]::TEXT[];"
        f.puts "    final_columns TEXT[] := ARRAY[]::TEXT[];"
        f.puts "    final_values TEXT[] := ARRAY[]::TEXT[];"
        f.puts "BEGIN"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
        columns.each_with_index do |col, col_idx|
          f.puts "    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É #{col}"
          f.puts "    SELECT EXISTS ("
          f.puts "        SELECT 1 FROM information_schema.columns "
          f.puts "        WHERE table_name = '#{table_name}' "
          f.puts "        AND column_name = '#{col}' "
          f.puts "        AND table_schema = 'public'"
          f.puts "    ) INTO col_exists;"
          f.puts "    "
          f.puts "    IF col_exists THEN"
          f.puts "        final_columns := final_columns || '#{col}';"
          f.puts "        final_values := final_values || '#{values[col_idx]}';"
          f.puts "    ELSE"
          f.puts "        missing_cols := missing_cols || '#{col}';"
          f.puts "    END IF;"
          f.puts ""
        end
        
        f.puts "    -- –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"
        f.puts "    IF array_length(missing_cols, 1) > 0 THEN"
        f.puts "        RAISE NOTICE '–¢–∞–±–ª–∏—Ü–∞ #{table_name}: –ø—Ä–æ–ø—É—â–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: %', array_to_string(missing_cols, ', ');"
        f.puts "    END IF;"
        f.puts ""
        f.puts "    -- –í—ã–ø–æ–ª–Ω—è–µ–º INSERT —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"
        f.puts "    IF array_length(final_columns, 1) > 0 THEN"
        f.puts "        EXECUTE 'INSERT INTO #{table_name} (' || "
        f.puts "                array_to_string(final_columns, ', ') || "
        f.puts "                ') VALUES (' || "
        f.puts "                array_to_string(final_values, ', ') || "
        f.puts "                ') ON CONFLICT DO NOTHING';"
        f.puts "    END IF;"
        f.puts ""
        f.puts "EXCEPTION WHEN others THEN"
        f.puts "    RAISE NOTICE '–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ #{table_name}: %', SQLERRM;"
        f.puts "END $$;"
        f.puts ""
      end
      
    rescue => e
      puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ #{table_info[:name]}: #{e.message}"
      f.puts "-- –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò #{table_info[:name]}: #{e.message}"
      f.puts ""
    end
  end
  
  f.puts "-- ========================================"
  f.puts "-- –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–ê"
  f.puts "-- ========================================"
  
  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  %w[users links events affiliates].each do |table|
    f.puts "DO $$ "
    f.puts "DECLARE"
    f.puts "    cnt INTEGER;"
    f.puts "BEGIN"
    f.puts "    SELECT count(*) INTO cnt FROM #{table};"
    f.puts "    RAISE NOTICE '–¢–∞–±–ª–∏—Ü–∞ #{table}: % –∑–∞–ø–∏—Å–µ–π', cnt;"
    f.puts "EXCEPTION WHEN undefined_table THEN"
    f.puts "    RAISE NOTICE '–¢–∞–±–ª–∏—Ü–∞ #{table}: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢';"
    f.puts "END $$;"
    f.puts ""
  end
  
  f.puts "-- –£–ú–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù"
end

puts "‚úÖ –£–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: #{output_file}"
puts "üìè –†–∞–∑–º–µ—Ä: #{File.size(output_file) / 1024}KB"

puts "\nüéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò –£–ú–ù–û–ì–û –ò–ú–ü–û–†–¢–ê:"
puts "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π"
puts "‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (active_test_path_assignments, stripe_fee_cents)"
puts "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ON CONFLICT DO NOTHING –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π"
puts "‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"
puts "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º"

puts "\nüìã –¢–ï–ü–ï–†–¨ –í–´–ü–û–õ–ù–ò–¢–ï –í SUPABASE:"
puts "   #{output_file}"